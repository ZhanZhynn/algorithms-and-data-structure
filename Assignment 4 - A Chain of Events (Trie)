"""
Title: Assignment 4
Name: Hee Zhan Zhynn
Student ID: 31989403
Version: 3
"""

#%%
# ===========================================================================================
#                                   Question 2 - A Chain of Events (Trie)
#============================================================================================

class Node:
    # Class represening the node date structure

    def __init__(self, data=None, size=27):
        '''
        This constructor initialize the Node of the tree

        Precondition: an positive integer representing the size
        Postcondition: A Node is initialized with the default properties

        Input:
            An integer representing the link size

        Return:
            -

        Time complexity: 
            Best: O(1) 
            Worst: O(1)

        Space complexity: 
            Input: O(1) 
            Aux: O(1) 
        '''
        #terminal at index 0 $
        self.link = [None] * size #26 + $

        #data payload
        self.data = data
        self.nodeIndex = None
        self.freq = 0       #number of unique timeline
        self.length = 0     #lenght of the chain
        self.maxLength = 0  
        self.parentChar = None


#%% 
class Trie:
    # Class representing the Trie data structure

    occurenceInfo = [None]  #class variable to store info [len, index]

    def __init__(self):
        '''
        This constructor initialize the Trie object

        Precondition: -
        Postcondition: A node as the root

        Input:
            -

        Return:
            -

        Time complexity: 
            Best: O(1) 
            Worst: O(1)

        Space complexity: 
            Input: O(1) 
            Aux: O(1) 
        '''
        self.root = Node()
        
    def insert(self, key, nodeIndex, data):
        '''
        Function to insert the key at each node. If a node for the key char is not present, it creates a new node.
        Key is stored as a String, we traverse each character in the string and add the character as a node.

        Precondition: key is not none
        Postcondition: a trie structure with the key as nodes

        Input:
            The String key to store, an index to represent the nodeIndex, a string of data

        Return:
            -

        Time complexity: 
            Best: O(M) where M is the length of the key
            Worst: O(M) where M is the length of the key

        Space complexity: 
            Input: O(1) 
            Aux: O(1) 
        '''
        #begin from root
        current = self.root

        #go through key char by char
        length = 0
        for char in key:
            #convert ascii to index
            index = ord(char) - 97 + 1 
            #if path exist
            if current.link[index] is not None:
                current.link[index].parentChar = key[0] #store the starting character of the key
                current = current.link[index]
                length += 1

                #if from a different timeline
                if current.nodeIndex != nodeIndex:
                    current.nodeIndex = nodeIndex
                    current.freq += 1

                    #update class variable table to store the longest occurence chain
                    if Trie.occurenceInfo[current.freq] is None or  Trie.occurenceInfo[current.freq][0] < length:
                        # Trie.occurenceInfo[current.freq] = [length, current.parentChar]
                        Trie.occurenceInfo[current.freq] = [length, key]
                
            #if path does not exist
            else:
                #create new node
                current.link[index] = Node()
                current.link[index].parentChar = key[0]
                current = current.link[index]
                current.nodeIndex = nodeIndex
                current.freq += 1
                length += 1

                #update class variable table to store the longest occurence chain
                if Trie.occurenceInfo[current.freq] is None or Trie.occurenceInfo[current.freq][0] < length:
                    # Trie.occurenceInfo[current.freq] = [length, current.parentChar]
                    Trie.occurenceInfo[current.freq] = [length, key]
        
        #add the terminal at index 0
        index = 0
        #if path exist
        if current.link[index] is not None:
            current = current.link[index]
            current.nodeIndex = nodeIndex

        #if path does not exist
        else:
            #create new node
            current.link[index] = Node()
            current = current.link[index]
            current.nodeIndex = nodeIndex
        #add in payload
        current.data = data

    def search(self, key):
        '''
        Function to search the given key and retrieve the stored data related to the key. Traverse the trie
        and char by char until we reach a terminal node to return the data.

        Precondition: Key is not none
        Postcondition: Traverse throught the trie to using the key string to obtain the data

        Input:
            String key for searching

        Return:
            Stored data related to the search string

        Time complexity: 
            Best: O(M) where M is the length of the key
            Worst: O(M) where M is the length of the key

        Space complexity: 
            Input: O(1) 
            Aux: O(1) 
        '''
        #begin from root
        current = self.root

        #go through key 1 by 1
        for char in key:
            #convert ascii to index
            index = ord(char) - 97 + 1 
            #if path exist
            if current.link[index] is not None:
                current = current.link[index]

            #if path does not exist
            else:
                return None #can raise exception too
        
        #add the terminal at index 0
        index = 0
        #if path exist
        if current.link[index] is not None:
            current = current.link[index]
        #if path does not exist
        else:
            return None
        #at leaf terminal
        return current.data

#%%
class EventsTrie:
    # The EventsTrie class structure (SuffixTrie)

    def __init__(self, timelines):
        '''
        This constructor initialize the trie data structure

        Precondition: List of words
        Postcondition: A SuffixTrie data structure to store all prefix of suffixes of the string

        Input:
            List of words (timelines)

        Return:
            -

        Time complexity: 
            Best: O(NM^2) where N is the number of timelines in timelines and M is the number of events in the longest timeline.
            Worst: O(NM^2) where N is the number of timelines in timelines and M is the number of events in the longest timeline.

        Space complexity: 
            Input: O(N) where N is the number of timelines in timelines
            Aux: O(N) where N is the number of timelines in timelines
        '''
        # Initialize the trie data structure here

        # create suffixes and store them
        self.root = Trie()

        #initilize a class variable to store information about longest occurence chain
        Trie.occurenceInfo = [None] * (len(timelines)+1)

        nodeIndex = 0
        for timeline in timelines: 
            nodeIndex += 1
            for i in range(len(timeline)):  
                key = timeline[i:]         
                self.root.insert(key, nodeIndex, key) 
        
        #store info in class variable table about longest occurence chain
        i = 1
        for i in range(len(Trie.occurenceInfo)):
            if Trie.occurenceInfo[i] is not None:
                length = Trie.occurenceInfo[i][0]           #get length of longest for occurence i
                key = Trie.occurenceInfo[i][1]              #get the key of longest for occurence i
                Trie.occurenceInfo[i][1] = key[0:length]    #store the longest chain string for occurence i


    def getLongestChain(self, noccurence):
        '''
        This function performs the operation needed to find the chain of events occurencing at least noccurence time. 
        Since we stored info about the longest occurence chain in our class variable, we can just access it directly.

        Precondition: Positive integer of noccurence input
        Postcondition: -

        Input:
            Positive integer of noccurence to check

        Return:
            The longest string which happened for at least noccurence

        eg:
        timelines = ["abaaac", "aac", "aac", "b", "baaac", "abbbccc", "c", "cc","bb"] 
        mytrie = EventsTrie(timelines)
        noccurence = 3
        mytrie.getLongestChain(noccurence)
        >>>aac

        Time complexity: 
            Best: O(1) 
            Worst: O(1)

        Space complexity: 
            Input: O(1) 
            Aux: O(1) 
        '''
        # occurencing at least noccurence time.
        if Trie.occurenceInfo[noccurence] is None:
            return None
        return Trie.occurenceInfo[noccurence][1]
